@page "/timeentries"

@inject ITimeEntryService TimeEntryService
@inject NavigationManager NavigationManager
@implements IDisposable

<PageTitle>TIme Entries</PageTitle>

<h3>Time Entries</h3>

<button class="btn btn-primary mb-2" @onclick="CreateTimeEntry">
    Create Time Entry
</button>

<QuickGrid ItemsProvider="timeEntriesProvider" Pagination="@pagination">
    <PropertyColumn Title="Start" Property="t =>t.Start" />
    <PropertyColumn Title="End" Property="t =>t.End" />
    <PropertyColumn Title="Duration" Property="t =>GetDuration(t.Start, t.End)" />
    <PropertyColumn Title="Project" Property="t => t.Project.Name">
        <ColumnOptions>
            <div>
                <input type="search" autofocus @bind="projectFilter" @bind:event="oninput" placeholder="Search..." />
            </div>
        </ColumnOptions>
    </PropertyColumn>
    <TemplateColumn>
        <button class="btn btn-primary"
                @onclick="() => ShowProject(context.Project.Id)">
            Details
        </button>
    </TemplateColumn>
    <TemplateColumn>
        <button class="btn btn-primary"
                @onclick="() => EditTimeEntry(context.Id)">
            Edit
        </button>
    </TemplateColumn>
</QuickGrid>

<Paginator State="@pagination" />

@if (projectId > 0)
{
    <ProjectDetails ProjectId="@projectId" />
}

@code {
    int projectId = 0;
    string? projectFilter;
    PaginationState pagination = new() { ItemsPerPage = 10 };
    GridItemsProvider<TimeEntryResponse>? timeEntriesProvider;

    // In memory filtering
    IQueryable<TimeEntryResponse> FilteredTimeEntries
    {
        get
        {
            var result = TimeEntryService.TimeEntries.AsQueryable();
            if (!string.IsNullOrWhiteSpace(projectFilter))
            {
                result = result.Where(t => t.Project.Name
                    .Contains(projectFilter, StringComparison.OrdinalIgnoreCase));
            }
            return result;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        // Server side filtering
        timeEntriesProvider = async req =>
        {
            var responce = await TimeEntryService.GetTimeEntries(req.StartIndex, req.Count.Value);
            return GridItemsProviderResult.From(items: responce.TimeEntries, totalItemCount: responce.TotalCount);
        };

        await TimeEntryService.GetTimeEntriesByProject(projectId);
        TimeEntryService.OnChange += StateHasChanged;
    }

    private string GetDuration(DateTime? start, DateTime? end)
    {
        if (start is null || end is null) return "";

        var duration = end.Value - start.Value;
        var result = $"{duration.Hours}h {duration.Minutes}m";
        return result;
    }

    private void ShowProject(int id)
    {
        if (projectId == id) return;

        projectId = id;
        StateHasChanged();
    }

    private void CreateTimeEntry() => NavigationManager.NavigateTo("/timeentry");

    private void EditTimeEntry(int id) => NavigationManager.NavigateTo($"/timeentry/{id}");

    public void Dispose()
    {
        TimeEntryService.OnChange -= StateHasChanged;
    }
}